{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-pin-list",
  "type": "registry:ui",
  "title": "Animated Pin List",
  "description": "Animated Pin List Component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/ui-elements/animated-pin-list/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  GitCommit,\n  AlertTriangle,\n  Box,\n  KeyRound,\n  Regex,\n  Pin,\n} from 'lucide-react';\nimport { motion, LayoutGroup, AnimatePresence } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\nconst ITEMS = [\n  {\n    id: 1,\n    name: 'Commit Zone',\n    info: 'Code updates · Closes 9:00 PM',\n    icon: GitCommit,\n    pinned: true,\n  },\n  {\n    id: 2,\n    name: '404 Room',\n    info: 'Fixing errors · Open 24 hours',\n    icon: AlertTriangle,\n    pinned: true,\n  },\n  {\n    id: 3,\n    name: 'NPM Stop',\n    info: 'Install stuff · Closes 8:00 PM',\n    icon: Box,\n    pinned: false,\n  },\n  {\n    id: 4,\n    name: 'Token Lock',\n    info: 'Login stuff · Open 24 hours',\n    icon: KeyRound,\n    pinned: false,\n  },\n  {\n    id: 5,\n    name: 'Regex Zone',\n    info: 'Find words · Closes 9:00 PM',\n    icon: Regex,\n    pinned: false,\n  },\n];\n\nconst ITEM_MOTION_TRANSITION = {\n  type: 'spring',\n  stiffness: 320,\n  damping: 20,\n  mass: 0.8,\n};\n\nconst LABEL_MOTION_PROPS = {\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n  exit: { opacity: 0 },\n  transition: { duration: 0.22, ease: 'easeInOut' },\n};\n\nfunction AnimatedPinList() {\n  const [items, setItems] = React.useState(ITEMS);\n  const [togglingGroup, setTogglingGroup] = React.useState<\n    'pinned' | 'unpinned' | null\n  >(null);\n\n  const pinned = items.filter((u) => u.pinned);\n  const unpinned = items.filter((u) => !u.pinned);\n\n  const toggleStatus = (id: number) => {\n    const item = items.find((u) => u.id === id);\n    if (!item) return;\n\n    setTogglingGroup(item.pinned ? 'pinned' : 'unpinned');\n    setItems((prev) => {\n      const idx = prev.findIndex((u) => u.id === id);\n      if (idx === -1) return prev;\n      const updated = [...prev];\n      const [item] = updated.splice(idx, 1);\n      if (!item) return prev;\n      const toggled = { ...item, pinned: !item.pinned };\n      toggled.pinned ? updated.push(toggled) : updated.unshift(toggled);\n      return updated;\n    });\n    // Reset group z-index after the animation duration (keep in sync with animation timing)\n    setTimeout(() => setTogglingGroup(null), 500);\n  };\n\n  return (\n    <div className=\"space-y-10\">\n      <LayoutGroup>\n        <div className=\"space-y-2\">\n          <AnimatePresence>\n            {pinned.length > 0 && (\n              <motion.p\n                layout\n                key=\"pinned-label\"\n                className=\"font-medium px-3 text-neutral-500 dark:text-neutral-300 text-sm\"\n                {...LABEL_MOTION_PROPS}\n              >\n                Pinned Items\n              </motion.p>\n            )}\n          </AnimatePresence>\n          {pinned.length > 0 && (\n            <div\n              className={cn(\n                'space-y-3 relative',\n                togglingGroup === 'pinned' ? 'z-10' : 'z-5',\n              )}\n            >\n              {pinned.map((item) => (\n                <motion.div\n                  key={item.id}\n                  layoutId={`item-${item.id}`}\n                  onClick={() => toggleStatus(item.id)}\n                  transition={ITEM_MOTION_TRANSITION}\n                  className=\"flex items-center justify-between gap-5 rounded-2xl bg-neutral-200 dark:bg-neutral-800 px-3 py-2\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"rounded-lg bg-background p-2\">\n                      <item.icon className=\"size-5 text-neutral-500 dark:text-neutral-400\" />\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-semibold\">{item.name}</div>\n                      <div className=\"text-xs text-neutral-500 dark:text-neutral-400 font-medium\">\n                        {item.info}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-center size-8 rounded-full bg-neutral-400 dark:bg-neutral-600\">\n                    <Pin className=\"size-4 text-white fill-white\" />\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <AnimatePresence>\n            {unpinned.length > 0 && (\n              <motion.p\n                layout\n                key=\"all-label\"\n                className=\"font-medium px-3 text-neutral-500 dark:text-neutral-300 text-sm\"\n                {...LABEL_MOTION_PROPS}\n              >\n                All Items\n              </motion.p>\n            )}\n          </AnimatePresence>\n          {unpinned.length > 0 && (\n            <div\n              className={cn(\n                'space-y-3 relative',\n                togglingGroup === 'unpinned' ? 'z-10' : 'z-5',\n              )}\n            >\n              {unpinned.map((item) => (\n                <motion.div\n                  key={item.id}\n                  layoutId={`item-${item.id}`}\n                  onClick={() => toggleStatus(item.id)}\n                  transition={ITEM_MOTION_TRANSITION}\n                  className=\"flex items-center justify-between gap-5 rounded-2xl bg-neutral-200 dark:bg-neutral-800 px-3 py-2 group\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"rounded-lg bg-background p-2\">\n                      <item.icon className=\"size-5 text-neutral-500 dark:text-neutral-400\" />\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-semibold\">{item.name}</div>\n                      <div className=\"text-xs text-neutral-500 dark:text-neutral-400 font-medium\">\n                        {item.info}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-center size-8 rounded-full bg-neutral-400 dark:bg-neutral-600 opacity-0 group-hover:opacity-100 transition-opacity duration-250\">\n                    <Pin className=\"size-4 text-white\" />\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n      </LayoutGroup>\n    </div>\n  );\n}\n\nexport { AnimatedPinList };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/ui-elements/animated-pin-list.tsx"
    }
  ]
}